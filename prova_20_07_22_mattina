/******************************************************************
Welcome to the Operating System examination

You are editing the '/home/esame/prog.c' file. You cannot remove 
this file, just edit it so as to produce your own program according to
the specification listed below.

In the '/home/esame/'directory you can find a Makefile that you can 
use to compile this program to generate an executable named 'prog' 
in the same directory. Typing 'make posix' you will compile for 
Posix, while typing 'make winapi' you will compile for WinAPI just 
depending on the specific technology you selected to implement the
given specification. Most of the required header files (for either 
Posix or WinAPI compilation) are already included in the head of the
prog.c file you are editing. 

At the end of the examination, the last saved snapshot of this file
will be automatically stored by the system and will be then considered
for the evaluation of your exam. Modifications made to prog.c which are
not saved by you via the editor will not appear in the stored version
of the prog.c file. 
In other words, unsaved changes will not be tracked, so please save 
this file when you think you have finished software development.
You can also modify the Makefile if requesed, since this file will also
be automatically stored together with your program and will be part
of the final data to be evaluated for your exam.

PLEASE BE CAREFUL THAT THE LAST SAVED VERSION OF THE prog.c FILE (and of
the Makfile) WILL BE AUTOMATICALLY STORED WHEN YOU CLOSE YOUR EXAMINATION 
VIA THE CLOSURE CODE YOU RECEIVED, OR WHEN THE TIME YOU HAVE BEEN GRANTED
TO DEVELOP YOUR PROGRAM EXPIRES. 


SPECIFICATION TO BE IMPLEMENTED:
Scrivere un programma che riceva in input tramite argv[] i nomi di N file,
con N magiore o uguale a 1. L'applicazione dovrà controllare che i nomi dei 
file siano diversi tra di loro.
I file dovranno essere creati oppure troncati se esistenti.
Per ogniuno dei file dovra' essere attivato un nuovo processo, che indicheremo
con Pi, che gestirà il contenuto del file. 
Tutti i processi Pi leggeranno linee di caratteri da standard input, se la linea
letta ha una lunghezza (incluso il terminatore di linea) inferiore oppure 
uguale a 10 caratteri essa dovra' essere scritta all'interno del file gestito
al processo Pi lettore. Altrimenti la linea dovrà essere comunicata al processo
parent il quale la riporterà sullo standard output.

L'applicazione dovrà essere in grado di gestire il segnale SIGINT 
(o CTRL_C_EVENT nel caso WinAPI) in modo tale che ogni processo che 
verrà colpito riporti su standard output il contenuto corrente di tutti
i file che erano stati specificati in argv[], seguendo l'ordine tramite cui
i nomi dei file erano presenti negli argomenti forniti all'applicazione.
In ogni caso, nessuno dei processi dovrà terminare la sua esecuzione in caso di arrivo
della segnalazione.

In caso non vi sia immissione di dati sullo standard input e non vi siano segnalazioni, 
l'applicazione dovra' utilizzare non piu' del 5% della capacita' di lavoro della CPU.

*****************************************************************/
#ifdef Posix_compile
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <pthread.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/mman.h>
#include <sys/sem.h>
#include <semaphore.h>
#include <fcntl.h>
#else
#include <windows.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#define MAX 256
#define SIZE 10
#define KEY 15

int* file;
int fd[2];
pid_t pid;
void* mem;
struct sembuf s_b;
int n;
void* mem_2;




void gestore(int sig){
 *((int*)mem_2) = 1;
}





int main(int argc, char** argv){
 int r ;
 char buffer[MAX];
 int sem;
 int c_sem;
 int s_op;
 int flag = 0;

 if(argc < 1){
  printf("errore nel numero di arg passati deve essere > o = a 1 \n");
  return -1;
 } 

 n = argc - 1;

 for(int i = 1; i < n; i++ ){
  for(int j = i+1; j <= n; j++){
    if(strcmp(argv[i],argv[j]) == 0 ){
     printf("le stringe: %s %s sono uguali \n ", argv[i], argv[j]);
     return -1;
    }
  }
 }


 file = malloc(sizeof(int)*n);
 if(file == NULL){
  perror("errore nella malloc");
  return -1;
 }


 for(int k = 0; k < n; k++){
  file[k] = open(argv[k+1],O_CREAT|O_TRUNC|O_RDWR,0666);
  if(file[k] < 0 ){
   perror("errore open file");
   return -1;
  }
  printf("il file %s ha descrittore %d \n",argv[k+1],file[k]);
  fflush(stdout);
 }
 int p = pipe(fd);
 if(p < 0){
  perror("Errore pipe");
  return -1;
 }
 printf("pipe %d %d \n",fd[0],fd[1]);

 mem = mmap(NULL,sizeof(int),PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS,-1,0);
 mem_2 =mmap(NULL,sizeof(int),PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS,-1,0);

 if(mem == NULL || mem_2 == NULL ){
  perror("errore mmap");
  return -1;
 }
 
 sem = semget(KEY,1,IPC_CREAT|0666);
 if(sem < 0){
  perror("errore semget");
  return -1;
 }
 
 c_sem = semctl(sem,0,SETVAL,1);
 if(c_sem < 0){
  perror("errore semctl");
  return -1;
 }


 *((int*)mem) = sem;
 *((int*)mem_2) = flag;

 for(int y = 0; y < n; y++){
  pid = fork();
  if(pid == 0){
  //figlio
   char* c;
   int w,r;
   char buff[MAX];
   int file_read;

   signal(SIGINT,gestore);
   close(fd[0]);
   printf("figlio creato %d\n",getpid());
   sleep(1);
   while(1){
  //accedo sem in modo che evito che più figli scrivano sulla pipe verso il padre
   s_b.sem_num = 0;
   s_b.sem_op = -1;
   s_b.sem_flg = 0;

  if(*((int*)mem_2) != 0){
   *((int*)mem_2) = 0;

   for(int i = 0; i < n; i++){
    printf("file %s: \n",argv[i+1]);
    file_read = open(argv[i+1],O_RDONLY);
    lseek(file_read,0,SEEK_SET);
    while(1){
retry_read_gest:
     r = read(file_read,buff,MAX);
     if( r == 0){
      break;
     }else if( r < 0){
      if(errno == EINTR) goto retry_read_gest;
      perror("errore read");
      break;
     }
     write(1,buff,r); // andrebbe controllato se effettivamente la scrittura è avvenuta.
     fflush(stdout);
    }
   close(file_read);
   }
  }


retry_sem_op:
   s_op = semop(*((int*)mem),&s_b,1);
   if(s_op < 0){
    if(errno == EINTR) goto retry_sem_op;
    perror("errore semop");
    return -1;
   }

    printf("inserire la stringa: ");
    c = fgets(buffer,MAX,stdin);
    if( c == NULL){
     perror("Errore fgets");
     return -1;
    }
    if(strlen(buffer) <= SIZE && buffer[strlen(buffer)-1]){
retry_write:
      w = write(file[y],buffer,strlen(buffer) + 1);
      if(w < 0){
       if(errno == EINTR) goto retry_write;
       perror("errore write");
       return -1;
      }
     
      fsync(file[y]);

      printf("riportato su file %s %d : %s \n",argv[y+1],file[y],buffer);
      fflush(stdout);
      s_b.sem_num = 0;
      s_b.sem_op = 1;
      s_b.sem_flg = 0;

retry_sem_op_2:
      s_op = semop(*((int*)mem),&s_b,1);
      if(s_op < 0){
       if(errno == EINTR) goto retry_sem_op_2;
       perror("errore semop");
       return -1;
      } 

     }else{
retry_write_on_pipe:
     w = write(fd[1],buffer,strlen(buffer) + 1);
     if(w < 0){
       if(errno == EINTR) goto retry_write_on_pipe;
       perror("errore write");
       return -1;
     }
     fflush(stdout);
    }
   }
  }
 }
 //padre
 close(fd[1]);
 signal(SIGINT,SIG_IGN);
 while(1){
  memset(buffer,0,MAX);
retry_read:
  r = read(fd[0],buffer,MAX);
  if(r < 0){
   if(errno == EINTR) goto retry_read;
   perror("errore read");
   return -1;
  }
  printf("la stringa: %s \n", buffer);
  fflush(stdout);
   s_b.sem_num = 0;
   s_b.sem_op = 1;
   s_b.sem_flg = 0;

retry_sem_op_padre:
   s_op = semop(*((int*)mem),&s_b,1);
   if(s_op < 0){
    if(errno == EINTR) goto retry_sem_op_padre;
    perror("errore semop");
    return -1;
   }

 }
 
  free(file);
  munmap(mem,sizeof(int));
  munmap(mem_2,sizeof(int));

	return 0;
}
