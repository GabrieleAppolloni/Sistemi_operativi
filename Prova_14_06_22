/*Si sviluppi una applicazione che riceva tramite argv[] la seguente linea di comando

    nome_prog -f file1 [file2] ... [fileN] -s stringa1 [stringa2] ... [stringaN] 
    
indicante N nomi di file (con N > 0) ed N ulteriori stringhe (il numero dei nomi dei 
file specificati deve corrispondere al numero delle stringhe specificate).

L'applicazione dovra' generare N processi figli concorrenti, in cui l'i-esimo di questi 
processi effettuera' la gestione dell'i-esimo dei file identificati tramite argv[].
Tale file dovra' essere rigenerato allo startup dell'applicazione.
Il main thread del processo originale dovra' leggere indefinitamente stringhe da 
standard input e dovra' comparare ogni stringa letta che le N stringhe ricevute in 
input tramite argv[].
Nel caso in cui la stringa letta sia uguale alla i-esima delle N stringhe ricevuta 
in input, questa dovra' essere comunicata all'i-esimo processo figlio in modo che questo 
la possa inserire in una linea del file di cui sta effettuando la gestione. Invece, 
se il main thread legge una stringa non uguale ad alcuna delle N stringhe ricevute 
in input, questa stringa dovra essere comunicata a tutti gli N processi figli
attivi, che la dovranno scrivere sui relativi file in una nuova linea.

L'applicazione dovra' gestire il segnale SIGINT (o CTRL_C_EVENT nel caso
WinAPI) in modo tale che quando uno qualsiasi dei processi figli venga colpito 
dovra' riportare il contenuto del file da esso correntemente gestito in un file
con lo stesso nome ma con suffisso "_backup".  Invece il processo originale non dovra'
terminare o eseguire alcuna attivita' in caso di segnalazione.

In caso non vi sia immissione di dati sullo standard input e non vi siano segnalazioni, 
l'applicazione dovra' utilizzare non piu' del 5% della capacita' di lavoro della CPU.

*****************************************************************/
#ifdef Posix_compile
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <pthread.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/mman.h>
#include <sys/sem.h>
#include <semaphore.h>
#include <fcntl.h>
#include <sys/stat.h>
#else
#include <windows.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define SIZE 256
#define KEY 15

struct sembuf s_b;
int indice;
pid_t pid; 
char **file;
char **string;
int **pipes;
char** backup;


void gestore(int sig){
 char* c;
 char buffer_b[SIZE];
 printf("gestore attivato copia in corso..");
 FILE* orig = fopen(file[indice],"r");
 FILE* dest = fopen(backup[indice],"w");

 do{
  c = fgets(buffer_b,SIZE,orig);
  fprintf(dest,"%s\n",buffer_b);
 }while(c != NULL );
 printf("copia effettuata");
 fclose(orig);
 fclose(dest);
}


int main(int argc, char** argv){
 int n = argc -1;
 int n_2 ;
 int n_process;
 int sem;
// verifico se  N > 0
 if( argc < 5 ){
   printf("Errore nei parametri passati \n");
   return -1;
 }

retry_mmap:
 void* mem=mmap(NULL,sizeof(int),PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS,-1,0);
 if(mem == NULL){
  if(errno == EINTR) goto retry_mmap;
   perror("errore mmap");
   exit(-1);
 }
retry_sem:
 sem = semget(KEY,1,IPC_CREAT|0666);
 if(sem < 0){
  if(errno == EINTR) goto retry_sem;
  perror("errore semget");
  exit(-1);
 }

retry_ctl:
 int sem_c = semctl(sem,0,SETVAL,1);
 if(sem_c < 0){
  if(errno == EINTR) goto retry_ctl;
  perror("errore semctl");
  exit(-1);
 }

 for(int i = 0 ; i<= n; i++ ){
  if(strcmp(argv[i+1],"-s") == 0){
    n_2 = i;
    break;
  }
 }
 int n_3 = (n - n_2) - 1;
 
 if(n_3 != (n_2 - 1)){
   printf("Numero di file diverso dalle stringhe");
   return -1;
 }
 pipes = malloc(sizeof(int*)*n_3);
 file = malloc(sizeof(char*)*(n_2-1));
 string = malloc(sizeof(char*)*n_3);
 backup = malloc(sizeof(char*)*n_3); 

 if(file == NULL || string == NULL || pipe == NULL || backup == NULL ){
  perror("malloc error ");
  exit(-1);
 }
 char back[30]; 

 for(int k = 0; k < n_3; k++){
  string[k] = malloc(sizeof(char*));
  file[k] = malloc(sizeof(char*));
  backup[k]= malloc(sizeof(char*));
  file[k] = argv[k+2];
  string[k] = argv[argc- n_3 +k];
  char back[20];
  snprintf(back,sizeof(back),"%s_backup",file[k]);
  backup[k] = strdup(back);
  printf("%s\n",back);

  printf("il file : %s ha la stringa %s e backup : %s \n",file[k], string[k],backup[k]);
 }

 for(int y = 0 ; y < n_3 ; y++){
 char s[15];
 int pipe;

 snprintf(s,sizeof(s),"pipe%d",y);
 printf("%s \n",s);
retry_pipe:
  int p = mkfifo(s,0666);
  if( p < 0 ){
   if(errno == EINTR)goto retry_pipe;
   perror("errore mkfifo");
   exit(-1);
  }

retry_open_pipe:
  pipe= open(s,O_RDWR,0666);
  if(pipe < 0){
    if(errno == EINTR) goto retry_open_pipe;
    perror("errore pipe");
    exit(-1);
  }
  pipes[y] = malloc(sizeof(int));
  *pipes[y] = pipe;
 }



 n_process = n_2 -1;
 printf("%d processi \n", n_process);
 for(int j= 0 ; j < n_process; j++){
  printf("i : %d \n", j);
retry_fork:
  pid = fork();
  if(pid < 0) {
   if( errno == EINTR) goto retry_fork;
    perror("error fork: ");
    exit(-1);

  }else if(pid == 0){
  //figlio 
  signal(SIGINT,gestore);
  int r;
  char buff[SIZE];
  int w_f;
  //char back[20];
 // snprintf(back,strlen(back),"%s_backup",file[j]);
  

retry_open:
   FILE* f = fopen(file[j],"w+");
   FILE* f_b = fopen(backup[j],"w+");
   if(f == NULL || f_b == NULL ){
    if(errno == EINTR) goto retry_open;
     perror("errore fopen");
     exit(-1);
   }
   while(1){
   indice = j;
retry_read:
    r = read(*pipes[j],buff,SIZE);
    if(r < 0){
     if(errno == EINTR) goto retry_read;
     perror("errore read pipe");
     exit(-1);
    }
    buff[r]= '\0';
    printf("ho letto %s \n", buff);
retry_fputs:
    w_f =fprintf(f,"%s\n",buff);
    if(w_f == EOF ){
     if(errno ==  EINTR) goto retry_fputs;
     perror("errore fputs");
     exit(-1);
    }
    fflush(f);
    s_b.sem_num = 0;
    s_b.sem_op = 1;
    s_b.sem_flg = 0;
    semop(sem,&s_b,1);
   }
  }
 }
 // processo padre
 signal(SIGINT,SIG_IGN);
 char buffer[SIZE];
 char* c;
 int w;
 while(1){
    s_b.sem_num = 0;
    s_b.sem_op = -1;
    s_b.sem_flg = 0;
    semop(sem,&s_b,1);

  c = fgets(buffer,SIZE,stdin);
  if(c == NULL){
    perror("errore fgets");
    break;
  }
  buffer[strcspn(buffer,"\n")] = '\0';
  //verifico che nessun processo stia lavorando 
  for(int i = 0; i < n_3; i++){
   if(strcmp(string[i],buffer) == 0){
    
retry_write_pipe:
   w = write(*pipes[i],buffer,strlen(buffer));
   if(w < 0){
    if(errno == EINTR) goto retry_write_pipe;
     perror("errore write pipe");
     exit(-1);
   }
   break;
   }
  }
  //sincro perchÃ¨ deve attendere che il processo abbia terminato le operazioni
 }
	return 0;
}
