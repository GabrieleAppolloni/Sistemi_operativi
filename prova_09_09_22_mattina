Fatal glibc error: tpp.c:86 (__pthread_tpp_change_priority): assertion failed: previous_prio == -1 || (previous_prio >= fifo_min_prio && previous_prio <= fifo_max_prio)
Annullato (core dump creato)
#ifdef Posix_compile
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <pthread.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/mman.h>
#include <sys/sem.h>
#include <semaphore.h>
#include <fcntl.h>
#else
#include <windows.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {

 int indice;


}data;

int* files;
pthread_mutex_t* base;

void* funzione(void* pointer){

 data* curr = (data*)pointer;
  
 pthread_mutex_lock(&base[curr->indice]);

 printf("sono nel thread \n");


 printf("il mio indice: %d \n",curr->indice);
 pthread_mutex_unlock(&base[(curr->indice)+1]);

 pthread_exit(NULL);

}




int main(int argc, char** argv){

int n = argc -1;
pthread_t thread[n];
int c_thread;
data d_thread[n];
pthread_mutex_t mutex[n];
int c_mutex;

 if(n < 1){
  printf("errore numero dei file non valido \n");
  return -1;
 }
 files = malloc(sizeof(int)*n);

 if(files == NULL){
  perror("errore malloc");
  return -1;
 }

 for( int i = 0; i < n; i++){
  files[i] = open(argv[i+1],O_CREAT|O_WRONLY,0666);
  if( files[i] < 0){
   perror("errore open");
   return -1;
  }
 }


 for(int k =0 ; k <n ; k++){
  c_mutex = pthread_mutex_init(&mutex[k],NULL);
  if(c_mutex < 0){
   perror("errore mutex_init");
   return -1;
  }
 }

 for(int y = 1; y < n; y++){
  c_mutex = pthread_mutex_lock(&mutex[y]);
  if(c_mutex < 0){
   perror("errore lock mutex");
   return -1;
  }
 }

 base = mutex;

 for(int j = 0; j < n; j++){
  d_thread[j].indice = j;
  c_thread = pthread_create(&thread[j],NULL,funzione,(void*)&d_thread[j]);
  if( c_thread < 0){
   perror("errore pthread_create");
   return -1;
  }
 }
 
 
 
 while(1);

	return 0;
}
